{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["sounds","key","mp3","Box","props","playSound","audio","current","play","id","parent","parentNode","classList","add","querySelector","innerText","React","createRef","this","addEventListener","e","target","remove","text","className","onClick","onKeyDown","handleKey","ref","src","Component","document","toUpperCase","getElementById","currentTime","App","map","sound","idx","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OAIMA,G,MAAS,CACb,CACEC,IAAK,IACLC,IAAK,4DAEP,CACED,IAAK,IACLC,IAAK,4DAEP,CACED,IAAK,IACLC,IAAK,4DAEP,CACED,IAAK,IACLC,IAAK,8DAEP,CACED,IAAK,IACLC,IAAK,4DAEP,CACED,IAAK,IACLC,IAAK,0DAEP,CACED,IAAK,IACLC,IAAK,8DAEP,CACED,IAAK,IACLC,IAAK,8DAEP,CACED,IAAK,IACLC,IAAK,0DAEP,CACED,IAAK,IACLC,IAAK,2DAEP,CACED,IAAK,IACLC,IAAK,2DAEP,CACED,IAAK,IACLC,IAAK,2DAEP,CACED,IAAK,IACLC,IAAK,mEAEP,CACED,IAAK,IACLC,IAAK,2DAEP,CACED,IAAK,IACLC,IAAK,0DAEP,CACED,IAAK,IACLC,IAAK,iEAEP,CACED,IAAK,IACLC,IAAK,gEAEP,CACED,IAAK,IACLC,IAAK,6DAgBHC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAWRC,UAAY,WACV,EAAKC,MAAMC,QAAQC,OAEnB,IAAMC,EAAK,EAAKH,MAAMC,QAAQE,GAExBC,EAAS,EAAKJ,MAAMC,QAAQI,WAClCD,EAAOE,UAAUC,IAAI,UAELH,EAAOC,WACfG,cAAc,MAAMC,UAA5B,UAA2CN,IAlB3C,EAAKH,MAAQU,IAAMC,YAHF,E,gEAMjBC,KAAKZ,MAAMC,QAAQY,iBAAiB,SAAS,SAACC,GAC7BA,EAAEC,OAAOV,WAChBC,UAAUU,OAAO,e,+BAiBjB,IAAD,EACgBJ,KAAKd,MAApBmB,EADD,EACCA,KAAMjB,EADP,EACOA,MAEd,OACE,yBAAKkB,UAAU,MAAMC,QAASP,KAAKb,UAAWqB,UAAWR,KAAKS,WAC3DJ,EACD,2BAAOK,IAAKV,KAAKZ,MAAOuB,IAAKvB,EAAOkB,UAAU,OAAOf,GAAIc,S,GAhCjDP,IAAMc,WAsCxBC,SAASZ,iBAAiB,WAAW,SAACC,GACpC,IAAMX,EAAKW,EAAEnB,IAAI+B,cACX1B,EAAQyB,SAASE,eAAexB,GAEnCH,IACDA,EAAM4B,YAAc,EACL5B,EAAMK,WACdC,UAAUC,IAAI,UACrBP,EAAME,WAIK2B,MA9DH,kBACR,yBAAK1B,GAAG,eAAee,UAAU,aAC/B,yBAAKf,GAAG,UAAUe,UAAU,WAC1B,2CACCxB,EAAOoC,KAAI,SAACC,EAAOC,GAAR,OACZ,kBAAC,EAAD,CAAKf,KAAMc,EAAMpC,IAAKA,IAAKqC,EAAKhC,MAAO+B,EAAMnC,YCxEjCqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFf,SAASE,eAAe,SDyHpB,kBAAmBc,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.48fec9d6.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nconst sounds = [\n  {\n    key: 'Q',\n    mp3: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\n  },\n  {\n    key: 'W',\n    mp3: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n  },\n  {\n    key: 'E',\n    mp3: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3' \n  },\n  {\n    key: 'R',\n    mp3: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\n  },\n  {\n    key: 'T',\n    mp3: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\n  },\n  {\n    key: 'Y',\n    mp3: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n  },\n  {\n    key: 'U',\n    mp3: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\n  },\n  {\n    key: 'I',\n    mp3: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\n  },\n  {\n    key: 'O',\n    mp3: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n  },\n  {\n    key: 'P',\n    mp3: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3'\n  },\n  {\n    key: 'A',\n    mp3: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3'\n  }, \n  {\n    key: 'S',\n    mp3: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3'\n  }, \n  {\n    key: 'D',\n    mp3: 'https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3'\n  }, \n  {\n    key: 'F',\n    mp3: 'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3'\n  }, \n  {\n    key: 'G',\n    mp3: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\n  }, \n  {\n    key: 'H',\n    mp3: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3'\n  }, \n  {\n    key: 'J',\n    mp3: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3'\n  }, \n  {\n    key: 'K',\n    mp3: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3'\n  }];\n\n\nconst App = () => (\n    <div id=\"drum-machine\" className=\"container\">\n      <div id=\"display\" className=\"display\">\n        <h1>Press a key</h1>\n        {sounds.map((sound, idx) => (\n        <Box text={sound.key} key={idx} audio={sound.mp3}/>\n        ))}\n        </div>\n      </div>\n    );\n\n\nclass Box extends React.Component  {\n  constructor(props) {\n    super(props);\n\n    this.audio = React.createRef();\n  }\n  componentDidMount() {\n    this.audio.current.addEventListener('ended', (e) => {\n      const parent = e.target.parentNode;\n       parent.classList.remove('active');\n  });\n  }\n\n  playSound = () => {\n    this.audio.current.play();\n\n    const id = this.audio.current.id;\n\n    const parent = this.audio.current.parentNode;\n    parent.classList.add('active');\n\n    const display = parent.parentNode;\n    display.querySelector('h1').innerText = `${id}`;\n  }\n\n\n    render() {\n      const { text, audio} = this.props;\n\n      return (\n        <div className=\"box\" onClick={this.playSound} onKeyDown={this.handleKey}>\n          {text}\n          <audio ref={this.audio} src={audio} className=\"clip\" id={text} />\n        </div>\n      )\n   }\n}\n\ndocument.addEventListener('keydown', (e) => {\n  const id = e.key.toUpperCase();\n  const audio = document.getElementById(id);\n\n  if(audio) {\n    audio.currentTime = 0;\n    const parent = audio.parentNode;\n    parent.classList.add('active');\n    audio.play();\n  }\n });\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}